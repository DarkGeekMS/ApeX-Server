{"variables":[],"info":{"name":"Laravel API","_postman_id":"a31805ca-3b54-4c85-bb77-182dd04f53a0","description":"","schema":"https:\/\/schema.getpostman.com\/json\/collection\/v2.0.0\/collection.json"},"item":[{"name":"Account\n\nControls the authentication, info and messages of any user account.","description":"","item":[{"name":"Delete message\nDelete a private message or a reply to a message. Either the receiver or the\nsender can delete a message. If both the receiver and the sender\nhave deleted the message, then it's deleted entirely from the database,\nIf a message is deleted, all its replies will be deleted.","request":{"url":"http:\/\/localhost\/api\/del_msg","method":"POST","body":{"mode":"formdata","formdata":[{"key":"id","value":"3LNfSlBMvV9I9vRA","type":"text","enabled":true},{"key":"token","value":"o5FFd43vkjbThtNf","type":"text","enabled":true}]},"description":"###Success Cases :\n1.The parameters are valid, return json contains\n \"the message is deleted successfully\" (status code 200).\n\n###Failure Cases:\n1. Message ID is not found. (status code 404)\n2. The user is not the sender nor the receiver of the message. (status code 400)\n3. The message is already deleted from the current user\n but still not deleted from the other user. (status code 400)\n4. The `token` is invalid, and the user is not authorized. (status code 400)","response":[]}},{"name":"readMsg\nRead a sent message.","request":{"url":"http:\/\/localhost\/api\/read_msg","method":"POST","body":{"mode":"formdata","formdata":[{"key":"ID","value":"M3zXqplBa5RjH3ld","type":"text","enabled":true},{"key":"token","value":"BmsXR1MnPc6tJc93","type":"text","enabled":true}]},"description":"Success Cases :\n1) return the details of the message.\n2) call moreChildren to retrieve replies to this message.\nfailure Cases:\n1) NoAccessRight token is not authorized.\n2) message id not found.","response":[]}},{"name":"Returns the user of the sent token.","request":{"url":"http:\/\/localhost\/api\/me","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"The function extracts the token given in the request then it checks if it\ncorresponds to an existing user then it will return an error if that is\ncase else it will return the user object of the token.","response":[]}},{"name":"Changes the preferences of the user.","request":{"url":"http:\/\/localhost\/api\/updateprefs","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"The function firstly validates the input data of the user to check\nif they are valid then it gets the user data from the given token.\nthen it checks if there is other users with the given username or email\nexcept the original user, If this is the case then it returns error\nelse it stores the data and then it extracts the avatar from the request\nthen it stores it and stores its directory in the database then the\nthen it returns true to indicate the success.","response":[]}},{"name":"Gets the preferences of the user.","request":{"url":"http:\/\/localhost\/api\/prefs","method":"GET","body":{"mode":"formdata","formdata":[]},"description":"The function gets the user associated with the given token then it returns\nits username, email, fullname, avatar and notification settings then it\nreturns then in a json response.","response":[]}},{"name":"blockList\nReturns the blocked users name & IDs by the logged in user.","request":{"url":"http:\/\/localhost\/api\/blocklist","method":"POST","body":{"mode":"formdata","formdata":[{"key":"token","value":"7TDbpGF1K6WvKcUR","type":"text","enabled":true}]},"description":"Success Cases :\n1) return the list of the blocked users.\nfailure Cases:\n1) NoAccessRight token is not authorized.","response":[]}},{"name":"Logs out a user from the website.","request":{"url":"http:\/\/localhost\/api\/sign_out","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"The function firstly extracts the token and invalidates it if any error\nhappens it will return an error message, else it will return the token\nvalue equals to null to indicate a successfull logout.","response":[]}},{"name":"profileInfo\nDisplaying the profile info of the user.","request":{"url":"http:\/\/localhost\/api\/info","method":"POST","body":{"mode":"formdata","formdata":[{"key":"token","value":"aGW0Uh5I82K1XEeI","type":"text","enabled":true}]},"description":"Success Cases :\n1) return username, profile picture , karma count , lists of the saved , personal and hidden posts of the user.\n2) in case of moderator it will also return the reports of the ApexCom he is moderator in.\nfailure Cases:\n1) NoAccessRight token is not authorized.","response":[]}},{"name":"messages\nReturns the inbox messages of the user.","request":{"url":"http:\/\/localhost\/api\/inbox_messages","method":"POST","body":{"mode":"formdata","formdata":[{"key":"max","value":6,"type":"text","enabled":true},{"key":"token","value":"xWWWiZSRSAVMXqX2","type":"text","enabled":true}]},"description":"Success Cases :\n1) return lists of the inbox messages of the user categorized by All , Sent and Unread.\nfailure Cases:\n1) NoAccessRight token is not authorized.","response":[]}},{"name":"Registers the given user into the website.","request":{"url":"http:\/\/localhost\/api\/sign_up","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"The function takes the email, username and password and validates them\nif the validation is failed it will return an error response and if it is\nsuccesseded it will generate a new id for the new user then it will hash its\npassword and creates a new user with the given data and creates a default\navatar then it will save the user into the database then it will generate a\nJWT token from its data and returns the token with the data as a response.","response":[]}},{"name":"Signs in the user into the website.","request":{"url":"http:\/\/localhost\/api\/sign_in","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"The function first extracts the credentials of the user and checks for them\nif they are wrong it will return an error message, else it will generate a\njwt token and returns it.","response":[]}},{"name":"Sends a code to the email to reset password.","request":{"url":"http:\/\/localhost\/api\/mail_verify","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"The function first validates the input username and if the validator fails it\nwill return an error else it will check if the user exists in the website if\nit doesn't exist it will return an error, Then it will generate random code\nand send it to the user's email, Then it will delete all codes in the\ndatabase asssociated with the user if exists then it will save the new code\nin the database and return a success message.","response":[]}},{"name":"Check the forgot password code to be correct.","request":{"url":"http:\/\/localhost\/api\/check_code","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"The function firstly checks for the input data and if the validator is\nfailed it will return an error then it will extract the code and username\nfrom the data and get the stored code of the user and compares the 2 codes\nif the codes are matching then it will return true to indicate that the code\nis correct, Else it will return false.","response":[]}},{"name":"Change password whether with the old password or the forgot password code","request":{"url":"http:\/\/localhost\/api\/changepassword","method":"PATCH","body":{"mode":"formdata","formdata":[{"key":"token","value":"TpgV6fJAGkTYtGRD","type":"text","enabled":true},{"key":"withcode","value":false,"type":"text","enabled":true},{"key":"password","value":"WYe9Q5eavQGntzj7","type":"text","enabled":true},{"key":"username","value":"msDMRGyDqY3Lnx9a","type":"text","enabled":true},{"key":"key","value":"fPBzIACmJB56oulr","type":"text","enabled":true}]},"description":"The function first check if i want to change the password using the code.\nor by inputting the old password, IN the first option we won't require a\ntoken if we change it with the code first i will compare the code with the\ncode in the database then if it is true i will change the password\nand delete the code, If we change without code, We will compare\nthe old password with the given one and if they are match we will\nchange the password.","response":[]}}]},{"name":"Adminstration\n\nTo manage the controls of admins and moderators","description":"","item":[{"name":"deleteApexCom.","request":{"url":"http:\/\/localhost\/api\/del_account","method":"DELETE","body":{"mode":"formdata","formdata":[]},"description":"This Function used to delete an apexcom.\nonly the admin can delete any apexcom.\n\nit receives the token of the logged in user.\nit gets the id of the apexcom to deleted.\nthen it checks that an apexcom with this id exists.\nif the apexcom doesnot exist it returns an error message ApexCom doesnot exist.\nit checks that the user who want to delete the apexcom is an admin(type=3).\nif not it returns an error message unauthorized access.\nif the user is an admin it deletes the apexcom and return true.","response":[]}},{"name":"deleteUser.","request":{"url":"http:\/\/localhost\/api\/del_user","method":"DELETE","body":{"mode":"formdata","formdata":[]},"description":"This Function used to delete a user by an admin or used for self-delete(Account deactivation).\n\nit receives the token of the logged in user.\nit gets the id of the user to deleted.\nthen it checks that a user exists with the given id.\nif not it returns an error message user doesnot exist.\nit gets password confirmation in case of account deactivation.\nthen it gets the hashed password of the user with the given id.\nit checks that the logged in user is an admin.\nif the logged user is an admin it deletes the user.\nif he is not an admin it checks that the logged in user has the same given id.\nif the ids are different it returns an error message UnAuthorized Deletion.\nif the ids match it checks that the hashed password is the same as the password confirmation.\nif the passwords doesnot match it returns an error message Wrong password entered.\notherwise it deletes the user (deactivate the account) and returns true.","response":[]}},{"name":"addModerator.","request":{"url":"http:\/\/localhost\/api\/add_moderator","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"This Function used to add a user as a moderator for an apexcom.\nonly the admin can add moderators to the apexcom.\n\nit receives the token of the logged in user.\nit gets the id of the user to be added as moderator.\nthen it checks that a user exists with the given id.\nif not it returns an error message user doesnot exist.\nit gets the id of the apexcom.\nthen it checks that an apexcom exists with the given id.\nif not it returns an error message apexcom doesnot exist.\nit checks that the logged in user is an admin.\nif the logged user is an admin it checks if the user is already a moderator for the given apex com.\nif the user is already a moderator it deletes the moderation and returns true.\nif not the user is added as moderator and it returns true.","response":[]}}]},{"name":"ApexCom\n\nControls the ApexCom info , posts and admin.","description":"","item":[{"name":"getApexComs.","request":{"url":"http:\/\/localhost\/api\/get_ApexComs","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"This Function used to get the apexComs names & IDs of the logged in user.\n\nIt makes sure that the user exists in our app,\nselect the apexComs ID's  and names which this user subscriber in then return them.","response":[]}},{"name":"About\nto get data about an ApexCom (moderators , name, contributors , rules , description and subscribers count) with a logged in user.","request":{"url":"http:\/\/localhost\/api\/about","method":"POST","body":{"mode":"formdata","formdata":[{"key":"ApexCom_ID","value":"P1v5vjdPMfqlcxnr","type":"text","enabled":true},{"key":"token","value":"r8vSGJhyAqoLbFJZ","type":"text","enabled":true}]},"description":"It first checks the apexcom id, if it wasnot found an error is returned.\nThen a check that the user is not blocked from the apexcom, if he was blocked a logical error is returned.\nThen, The about information of apexcom is returned.\n\n###Success Cases :\n1) return the information about the ApexCom.\n###failure Cases:\n1) User is blocked from this apexcom.\n2) ApexCom fullname (ApexCom_id) is not found.","response":[]}},{"name":"Post\nto post text , image or video in any ApexCom.","request":{"url":"http:\/\/localhost\/api\/submit_post","method":"POST","body":{"mode":"formdata","formdata":[{"key":"ApexCom_id","value":"MofpPZruvMGn5o9J","type":"text","enabled":true},{"key":"title","value":"g2ZFacb4FFKLSclD","type":"text","enabled":true},{"key":"body","value":"uiUN9u1Joup0OAfQ","type":"text","enabled":true},{"key":"img_name","value":"xiufklRC5G1Cyfuc","type":"text","enabled":true},{"key":"video_url","value":"K36dFGRP2U3iz8zG","type":"text","enabled":true},{"key":"isLocked","value":true,"type":"text","enabled":true},{"key":"token","value":"MenKZQNcO6cQQHpU","type":"text","enabled":true}]},"description":"It first checks the apexcom id, if it wasnot found an error is returned.\nThen a check that the user is not blocked from the apexcom, if he was blocked a logical error is returned.\nValidation to request parameters is done, the post shall contain title and at least a body, an image, or a video url.\nif validation fails logical error is returned, else a new post is added and return 'created'.\n\n###Success Cases :\n1) return true to ensure that the post was added to the ApexCom successfully.\n###failure Cases:\n1) User is blocked from this ApexCom.\n2) ApexCom fullname (ApexCom_id) is not found.\n3) Not including text , image or video in the request.\n4) NoAccessRight token is not authorized.","response":[]}},{"name":"Subscribe\nfor a user to subscribe an ApexCom.","request":{"url":"http:\/\/localhost\/api\/subscribe","method":"POST","body":{"mode":"formdata","formdata":[{"key":"ApexCom_id","value":"2nSGRArYHbrNRQiw","type":"text","enabled":true},{"key":"token","value":"tzjWNp0pubniTOpA","type":"text","enabled":true}]},"description":"It first checks the apexcom id, if it wasnot found an error is returned.\nThen a check that the user is not blocked from the apexcom, if he was blocked a logical error is returned.\nIf, the user already subscribes this apexcom, it will delete the subscription and return 'unsubscribed'.\nElse, the user will subscribe the apexcom, and it will return 'subscribed'.\n\n###Success Cases :\n1) return true to ensure that the subscription or unsubscribtion has been done successfully.\n###failure Cases:\n1) user blocked from this ApexCom.\n2) ApexCom fullname (ApexCom_id) is not found.","response":[]}},{"name":"Site Admin\nUsed by the site admin to create or update a new ApexCom.","request":{"url":"http:\/\/localhost\/api\/site_admin","method":"POST","body":{"mode":"formdata","formdata":[{"key":"name","value":"kpO916NLzr0UxdPe","type":"text","enabled":true},{"key":"description","value":"qW9a26waqYgBDDOm","type":"text","enabled":true},{"key":"rules","value":"8TtAX2hnVIGcI2J3","type":"text","enabled":true},{"key":"avatar","value":"Isi1y5irKTvrOjOD","type":"text","enabled":true},{"key":"banner","value":"V8NsnKlsNoI0sLcO","type":"text","enabled":true},{"key":"token","value":"Gz298tALm2jXQop1","type":"text","enabled":true}]},"description":"First, a verification that the user creating or updating apexcom is an admin, if not a logical error is returned.\nThen, validating the request parameters the name, description and rules are required, banner and avatar are optional but they should be images.\nIf, the validation fails all validation errors are returned.\nThen, check if the apexcom with this name exists or not, if it already exists then its data is updatad and return 'updated'.\nif apexcom name doesn't exist then a new apexcom is created and return 'created'.\n\n###Success Cases :\n1) return true to ensure that the ApexCom was created  successfully.\n###failure Cases:\n1) NoAccessRight the token does not support to Create an ApexCom ( not the admin token).\n2) Wrong or unsufficient submitted information.","response":[]}},{"name":"Guest about\nto get data about an ApexCom (moderators , name, contributors , rules , description and subscribers count).","request":{"url":"http:\/\/localhost\/api\/about","method":"GET","body":{"mode":"formdata","formdata":[{"key":"ApexCom_ID","value":"RWb7dXZqG46O7PSH","type":"text","enabled":true}]},"description":"It first checks the apexcom id, if it wasnot found an error is returned.\nThen about information of apexcom is returned.\n\nSuccess Cases :\n1) return the information about the ApexCom.\nfailure Cases:\n2) ApexCom fullname (ApexCom_id) is not found.","response":[]}}]},{"name":"Links and comments\n\ncontrols the comments , replies and private messages for each user","description":"","item":[{"name":"add.","request":{"url":"http:\/\/localhost\/api\/comment","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"This Function used to comment on post or another comment or reply to private message.\n\nIt makes sure that the user who want to add the comment (or reply) exists in our app,\nThen check what kind of action he want to take depending on the parent ID sent to the function.\nas the comment component ID starts with t1 so if the sent id t1 + value,\nSo he want to reply on comment and so on.\nif (post or comment) check the post is not locked (can receive new comments) (if locked action not valid)\ncheck the post\\comment owner exists or not ( if not action not valid)\nthen add the comment\\msg reply content in the specific table in the database.","response":[]}},{"name":"delete.","request":{"url":"http:\/\/localhost\/api\/delete","method":"DELETE","body":{"mode":"formdata","formdata":[]},"description":"This Function used to delete comment or post by their owner, any admin or\nany moderator in the apexCom holds this post or comment.\nany user can delete any comment on his own posts.\n\nit receives the token of the logged in user as for the user to delete any post he has to be logged in our app.\nIt makes sure that the user who want to delete the comment\/post exists in our app by the token,\nthen check what is the thing to be deleted (post or comment).\nby checking the second char of the id as posts start with t3 but comment with t1.\nIn case of post : check the type of the logged in user,\nif admin delete the post, if post owner delete the post, if moderator in the apexCom holds the post delete it.\nIf comment check the same with post\nin addition to checking if the logged in is the owner of the post holds this comment, then delete it.\nIf none of the above return the action is not valid.","response":[]}},{"name":"editText\nto edit the text of a post , comment or reply by its owner.","request":{"url":"http:\/\/localhost\/api\/edit","method":"PATCH","body":{"mode":"formdata","formdata":[{"key":"name","value":"TNGKKtLc3UJxJUin","type":"text","enabled":true},{"key":"content","value":"cEC9FFAHJ5XoVTSU","type":"text","enabled":true},{"key":"token","value":"FBwrR88lWDDu991k","type":"text","enabled":true}]},"description":"Success Cases :\n1) return true to ensure that the post or comment updated successfully.\nfailure Cases:\n1) NoAccessRight token is not authorized.\n2) NoAccessRight the token is not for the owner of the post or comment to be edited.\n3) post or comment fullname (ID) is not found.","response":[]}},{"name":"report.","request":{"url":"http:\/\/localhost\/api\/report","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"This Function used to report post or comment by logged in user.\nAdmin can't report any post\/comment as he can take action directly aginst this post\/comment.\npost\/comment owner can't report their own posts or comments.\npost owners can't report comment on their own posts as they can take action directly against any comment.\nmoderator in the apexComs holds the post\/comment can't report them.\n\nIt makes sure that the user who want to report the comment\/post exists in our app,\ncheck the logged in user if admin return invalid action.\nThen check the this to be reported is post or comment.\nas the comment component ID starts with t1_ but post with t3_.\ncheck if the logged in user is the post\/comment owner,\nor moderator in the apexcom holds this post\/comment return invalid action.\nin case of comment check if the logged in user is the owner of the post holds this comment,\nreturn invalid action.\nthen check if the user reported this post\/comment before,\nif so return the user already reported this post\/comment.\nif not create this report in the DB.","response":[]}},{"name":"vote.","request":{"url":"http:\/\/localhost\/api\/vote","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"This Function used to vote on comment or post by a logged in user.\n\nIt makes sure that the user who want to vote on post\/comment exists in our app,\nThen check the vote will be on comment or post.\nas the comment component ID starts with t1_ but post with t3_.\ncheck if the user voted on this post\/comment before.\nif not create the record and sum the votes on this post\/comment then return it.\nif it's not the first time for this user to vote on this post\/comment,\ncheck if the new vote on is the same as the previous one cancel this record return the updated votes count.\nif not update the vote record with the new value and return the updated votes count of the post\/comment.","response":[]}},{"name":"lock.","request":{"url":"http:\/\/localhost\/api\/lock_post","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"This Function used to un\/lock a post from recieving any new comment.\nBy his owner, moderator in the apexCom holds the post or admin site.\n\nIt makes sure that the user who want to un\/lock the posts exists in our app,\nthen check if the posts exists in our app.\nthen check if the logged in user was admin , post owner or moderator in the apexCom holds this post\nIt toggles the post locked status, if none of them it return Invalid action.","response":[]}},{"name":"hide.","request":{"url":"http:\/\/localhost\/api\/Hide","method":"POST","body":{"mode":"formdata","formdata":[]},"description":"This Function used to hide a post by logged in user.\n\nIt makes sure that the user who want to hide the post exists in our app,\nThen check the post to be hidden exists in our app.\nIt check if the post already hidden by this user, remove this record if not add this record in DB.","response":[]}},{"name":"save\nSave or UnSave a post or a comment.","request":{"url":"http:\/\/localhost\/api\/save","method":"POST","body":{"mode":"formdata","formdata":[{"key":"ID","value":"4QuHLBHVWy4botqg","type":"text","enabled":true},{"key":"token","value":"Rkv2fkHljR9w69Do","type":"text","enabled":true}]},"description":"Success Cases :\n1) return true to ensure that the post saved successfully.\nfailure Cases:\n1) NoAccessRight token is not authorized.\n2) post fullname (ID) is not found.","response":[]}},{"name":"moreChildren\nto retrieve additional comments omitted from a base comment tree (comment , replies , private messages).","request":{"url":"http:\/\/localhost\/api\/moreComments","method":"POST","body":{"mode":"formdata","formdata":[{"key":"parent","value":"fABCEt4kKcJRxP5w","type":"text","enabled":true},{"key":"ID","value":"7ss4CdoJvfCJYIix","type":"text","enabled":true}]},"description":"Success Cases :\n1) return thr retrieved comments or replies (10 reply at a time ).\nfailure Cases:\n1) NoAccessRight token is not authorized.\n2) post , comment , reply or message fullname (ID) is not found for any of the parent IDs.","response":[]}},{"name":"moreChildren\nto retrieve additional comments omitted from a base comment tree (comment , replies , private messages).","request":{"url":"http:\/\/localhost\/api\/moreComments","method":"GET","body":{"mode":"formdata","formdata":[{"key":"parent","value":"VhY2b0j38a7pggfZ","type":"text","enabled":true},{"key":"ID","value":"HgLO1MW845OqxadC","type":"text","enabled":true}]},"description":"Success Cases :\n1) return thr retrieved comments or replies (10 reply at a time ).\nfailure Cases:\n1) NoAccessRight token is not authorized.\n2) post , comment , reply or message fullname (ID) is not found for any of the parent IDs.","response":[]}}]},{"name":"Moderation\n\nControls the Moderators actions.","description":"","item":[{"name":"blockUser\nto block a user from ApexCom he is moderator in so that he can't interact in this ApexCom anymore.","request":{"url":"http:\/\/localhost\/api\/block","method":"POST","body":{"mode":"formdata","formdata":[{"key":"ApexCom_id","value":"bHCTUENn7bTWiF52","type":"text","enabled":true},{"key":"user_id","value":"citKgI8ItF0vDJlX","type":"text","enabled":true},{"key":"token","value":"JttQhOantmWRln2V","type":"text","enabled":true}]},"description":"Success Cases :\n1) return true to ensure that the post or comment is removed successfully.\nfailure Cases:\n1) NoAccessRight the token is not for the moderator of this ApexCom including the post or comment to be removed.\n2) user fullname (id) is not found , already blocked or not subscribed in this ApexCom.","response":[]}},{"name":"ignoreReport\nto delete the ignored report from  ApexCom's reports.","request":{"url":"http:\/\/localhost\/api\/report_action","method":"POST","body":{"mode":"formdata","formdata":[{"key":"user_id","value":"lNKMZ9eZdENb5Ue4","type":"text","enabled":true},{"key":"reported_id","value":"wCbbDQylPEz7O6zc","type":"text","enabled":true},{"key":"token","value":"2yx6oz401hTVtOD9","type":"text","enabled":true}]},"description":"Success Cases :\n1) return true to ensure that the report is deleted successfully.\nfailure Cases:\n1) NoAccessRight the token is not for the moderator of this ApexCom including the report to be removed.\n2) report fullname (id) is not found.","response":[]}},{"name":"reviewReports\nview the reports sent by any user for any post or comment in the ApexCom he is moderator in.","request":{"url":"http:\/\/localhost\/api\/review_reports","method":"POST","body":{"mode":"formdata","formdata":[{"key":"ApexCom_id","value":"0NGDTyuQitsprkza","type":"text","enabled":true},{"key":"_token","value":"qtwRpJJQwV6Xx61H","type":"text","enabled":true}]},"description":"Success Cases :\n1) return the reported posts and comments.\nfailure Cases:\n1) NoAccessRight the token is not for the moderator of this ApexCom.","response":[]}}]},{"name":"User\n\nControl the user interaction with other users","description":"","item":[{"name":"Block\nUser block another user, so they can't send private messages to each other\n or see their each other posts or comments.","request":{"url":"http:\/\/localhost\/api\/block_user","method":"POST","body":{"mode":"formdata","formdata":[{"key":"blockedID","value":"t2_1","type":"text","enabled":true},{"key":"token","value":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9zaWduX3VwIiwiaWF0IjoxNTUzMjgwMTgwLCJuYmYiOjE1NTMyODAxODAsImp0aSI6IldDU1ZZV0ROb1lkbXhwSWkiLCJzdWIiOiJ0Ml8xMDYwIiwicHJ2IjoiODdlMGFmMWVmOWZkMTU4MTJmZGVjOTcxNTNhMTRlMGIwNDc1NDZhYSJ9.dLI9n6NQ1EKS5uyzpPoguRPJWJ_NJPKC3o8clofnuQo","type":"text","enabled":true}]},"description":"If the user is already blocked, the request will unblock him\n\n###Success Cases :\n1. Return json contains 'the user has been blocked successfully',\n       if the user was not blocked (status code 200)\n2. Return json contains 'the user has been unblocked seccessfully',\n       if the user was blocked already (status code 200).\n\n###Failure Cases:\n1. The `token` is invalid, return a message about the error (stauts code 400).\n2. Blocked user is not found (status code 404)\n3. The user is blocking himself (status code 400)\n4. There is a server-side error (status code 500).","response":[]}},{"name":"Compose\nSend a private message to another user.","request":{"url":"http:\/\/localhost\/api\/compose","method":"POST","body":{"mode":"formdata","formdata":[{"key":"receiver","value":"t2_1","type":"text","enabled":true},{"key":"subject","value":"Hello","type":"text","enabled":true},{"key":"content","value":"Can I have a date with you?","type":"text","enabled":true},{"key":"token","value":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9zaWduX3VwIiwiaWF0IjoxNTUzMjgwMTgwLCJuYmYiOjE1NTMyODAxODAsImp0aSI6IldDU1ZZV0ROb1lkbXhwSWkiLCJzdWIiOiJ0Ml8xMDYwIiwicHJ2IjoiODdlMGFmMWVmOWZkMTU4MTJmZGVjOTcxNTNhMTRlMGIwNDc1NDZhYSJ9.dLI9n6NQ1EKS5uyzpPoguRPJWJ_NJPKC3o8clofnuQo","type":"text","enabled":true}]},"description":"###Success Cases :\n1. The parameters are valid, return the id of the composed message\n   (status code 200)\n\n###Failure Cases:\n1. Messaged-user id is not found (status code 404).\n2. Invalid token, return a message about the error (status code 400).\n3. The users are blocked from each other (status code 400)\n4. There is a server-side error (status code 500).","response":[]}},{"name":"User Get User Data\nJust like [Guest Get User Data](#guest-get-user-data), except that\nit does't return user data between blocked users,\nit also adds the current user vote on the user's posts\nand if he had saved them.","request":{"url":"http:\/\/localhost\/api\/user_data","method":"POST","body":{"mode":"formdata","formdata":[{"key":"username","value":"King","type":"text","enabled":true},{"key":"token","value":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9zaWduX3VwIiwiaWF0IjoxNTUzMzg0ODYyLCJuYmYiOjE1NTMzODQ4NjIsImp0aSI6Ikg0bU5yR1k0eGpHQkd4eXUiLCJzdWIiOiJ0Ml8yMSIsInBydiI6Ijg3ZTBhZjFlZjlmZDE1ODEyZmRlYzk3MTUzYTE0ZTBiMDQ3NTQ2YWEifQ.OJU25mPYGRiPkBuZCrCxCleaRXLklvHMyMJWX9ijR9I","type":"text","enabled":true}]},"description":"Use this request only if the user is logged in and authorized.\n\n###Success Cases :\n1. Return the data of the user successfully.\n\n###Failure Cases:\n1. User is not found (status code 400).\n2. The `token` is invalid, return a message about the error (status code 400).\n3. The users are blocked from each other (status code 400)\n4. There is a server-side error (status code 500).","response":[]}},{"name":"Guest Get User Data\nReturn user data to be seen by another user.","request":{"url":"http:\/\/localhost\/api\/user_data","method":"GET","body":{"mode":"formdata","formdata":[]},"description":"User data includes: username, fullname, karma,\n profile picture (URL) and personal posts\n\nUse this request only if the user is a guest and not authorized\n\n###Success Cases :\n1.The parameters are valid, return the data of the user successfully\n (status code 200).\n\n###Failure Cases:\n1. User is not found (status code 404).\n2. There is a server-side error (status code 500).","response":[]}}]},{"name":"general","description":"","item":[{"name":"User Sort Posts\nJust like [Guest Sort Posts](#guest-sort-posts), except that\nit does't return the posts between blocked users\nand posts that are hidden or reported by the current user\nand posts from apexComs that the current user is blocked from,\nit also adds to every post the current user vote and if he had saved the post.","request":{"url":"http:\/\/localhost\/api\/sort_posts","method":"POST","body":{"mode":"formdata","formdata":[{"key":"apexComID","value":"t5_1","type":"text","enabled":true},{"key":"sortingParam","value":"votes","type":"text","enabled":true},{"key":"token","value":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9zaWduX3VwIiwiaWF0IjoxNTUzMjgwMTgwLCJuYmYiOjE1NTMyODAxODAsImp0aSI6IldDU1ZZV0ROb1lkbXhwSWkiLCJzdWIiOiJ0Ml8xMDYwIiwicHJ2IjoiODdlMGFmMWVmOWZkMTU4MTJmZGVjOTcxNTNhMTRlMGIwNDc1NDZhYSJ9.dLI9n6NQ1EKS5uyzpPoguRPJWJ_NJPKC3o8clofnuQo","type":"text","enabled":true}]},"description":"Use this request only if the user is logged in and authorized.\n\n###Success Cases :\n1. Return the result successfully (status code 200).\n\n###Failure Cases:\n1. ApexCom is not found (status code 404).\n2. The `token` is invalid, return a message about the error (status code 400)\n3. There is a server-side error (status code 500).","response":[]}},{"name":"User Search\nJust like [Guest Search](#guest-search) except that\nit does't return the posts between blocked users,\nposts that are hidden or reported by the current user\nand posts from apexComs that the current user is blocked from,\nit also doesn't return blocked users\nand the apexComs that the user is blocked from,\nit also adds the current user vote on the posts and if he had saved them\nand adds the current user subscription of the apexComs.","request":{"url":"http:\/\/localhost\/api\/search","method":"POST","body":{"mode":"formdata","formdata":[{"key":"query","value":"lorem","type":"text","enabled":true},{"key":"token","value":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9zaWduX3VwIiwiaWF0IjoxNTUzMjgwMTgwLCJuYmYiOjE1NTMyODAxODAsImp0aSI6IldDU1ZZV0ROb1lkbXhwSWkiLCJzdWIiOiJ0Ml8xMDYwIiwicHJ2IjoiODdlMGFmMWVmOWZkMTU4MTJmZGVjOTcxNTNhMTRlMGIwNDc1NDZhYSJ9.dLI9n6NQ1EKS5uyzpPoguRPJWJ_NJPKC3o8clofnuQo","type":"text","enabled":true}]},"description":"Use this request only if the user is logged in and authorized.\n\n###Success Cases :\n1. The `query` is valid, return the results successfullly (status code 200)\n\n###Failure Cases:\n1. The `query` is invalid, return message about the error (status code 400)\n2. The `token` is invalid, return a message about the error (status code 400)\n3. There is server-side error (status code 500)","response":[]}},{"name":"Get Subscribers\nReturns a list of the users subscribed to a certain ApexCom to an authorized user.","request":{"url":"http:\/\/localhost\/api\/get_subscribers","method":"POST","body":{"mode":"formdata","formdata":[{"key":"ApexCommID","value":"gc1liSBirwGSqDRJ","type":"text","enabled":true},{"key":"token","value":"RTHZJig8xAUSpIgI","type":"text","enabled":true}]},"description":"It first checks the apexcom id, if it wasnot found an error is returned.\nThen a check that the authorized user is not blocked from the apexcom, if he was blocked a logical error is returned.\nThen, it gets the username and id of the subscribers and returns them.\n\n###Success Cases :\n1) Return the result successfully.\n###failure Cases:\n1) Return empty list if there are no subscribers.\n2) ApexComm Fullname (ID) is not found.\n3) User blocked from this apexcom.","response":[]}},{"name":"Guest Search\nReturns a json contains posts, apexComs and users that match the given query.","request":{"url":"http:\/\/localhost\/api\/search","method":"GET","body":{"mode":"formdata","formdata":[]},"description":"Use this request only if the user is a guest and not authorized\n\n###Success Cases :\n1. The `query` is valid, return the results successfullly (status code 200)\n\n###Failure Cases:\n1. The `query` is invalid, return message about the error (status code 400)\n2. There is server-side error (status code 500)","response":[]}},{"name":"Guest Sort Posts\nReturns a list of posts in a given ApexCom\nsorted either by the votes or by the date when they were created\nor by the number of comments.","request":{"url":"http:\/\/localhost\/api\/sort_posts","method":"GET","body":{"mode":"formdata","formdata":[]},"description":"- When `apexComID` is missing or equals null,\n    it returns all the posts in all apexComs.\n- When `sortingParam` is missing or equals null, it uses the default value\n\nUse this request only if the user is a guest and not authorized\n\n###Success Cases :\n1. Return the result successfully (status code 200).\n\n###Failure Cases:\n1. ApexCom is not found (status code 404).\n2. There is a server-side error (status code 500).","response":[]}},{"name":"Apex Names\nReturns a list of the names and ids of all of the existing ApexComs.","request":{"url":"http:\/\/localhost\/api\/Apex_names","method":"GET","body":{"mode":"formdata","formdata":[]},"description":"###Success Cases :\n1. Return the result successfully (status code 200).\n\n###Failure Cases:\n1. There is server-side error (status code 500).","response":[]}},{"name":"GuestGetSubscribers\nReturns a list of the users subscribed to a certain ApexCom to a guest user.","request":{"url":"http:\/\/localhost\/api\/get_subscribers","method":"GET","body":{"mode":"formdata","formdata":[{"key":"ApexCommID","value":"773CDn0GSOlRsTZQ","type":"text","enabled":true}]},"description":"It first checks the apexcom id, if it was not found an error is returned.\nit gets the username and id of the subscribers and returns them.\n\n###Success Cases :\n1) Return the result successfully.\n###failure Cases:\n2) ApexComm Fullname (ID) is not found.","response":[]}}]}]}